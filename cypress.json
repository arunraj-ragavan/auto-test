{
  "schemaVersion": "2.2",
  "description": "aws:runShellScript",
  "parameters": {
    "commands": {
      "type": "String",
      "description": "echo hi",
      "default": 
        [
            "#!/bin/bash    ",
            "# Fetch the authentication token valid for the next 6 hours",
            "TOKEN=`curl -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\"`",
            "",
            "# Get the instance ID from the instance metadata",
            "instance_id=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/meta-data/instance-id)",
            "",
            "# Get the instance private ip from the instance metadata",
            "instance_privateip=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/meta-data/local-ipv4)",
            "",
            "# Get the region from the instance metadata",
            "region=$(curl -H \"X-aws-ec2-metadata-token: $TOKEN\" -s http://169.254.169.254/latest/meta-data/placement/region)",
            "",
            "# Fetch the name tag using the ICSM API and store the response in a variable",
            "response=$(curl -X GET \"https://icsm.isha.in/resource_admin/resource/instance/0duQVs4ArtPmMbyLZMvW457wgPCAhSZ7YWfHtaWU?instance_id=$instance_id&region=$region\")",
            "",
            "JQ_VERSION=$(jq --version)",
            "",
            "if [ -z \"$JQ_VERSION\" ]; then",
            "\t# Install jq based on the OS",
            "\t[ -f /etc/os-release ] && . /etc/os-release && case \"$ID\" in ubuntu|debian) sudo apt-get update && sudo apt-get install -y jq ;; amzn|centos|rhel|fedora) sudo yum install -y jq ;; *) echo \"Unsupported OS: $ID\" ;; esac",
            "else",
            "\techo \"jq is already installed\"",
            "fi",
            "",
            "# Extract the instance_name from the JSON response, trimming whitespace, appending private ip",
            "instance_name=$(echo \"$response\" | jq -r '.instance_name' | xargs)-$instance_privateip",
            "",
            "# Debugging output to see the fetched instance name",
            "echo \"Fetched instance name: '$instance_name'\"",
            "",
            "#Checking Elastic service status",
            "ELASTIC_STATUS=\"$(systemctl is-enabled elastic-agent.service)\"",
            "",
            " # Getting architecture of the server",
            "ARCH=\"$(arch)\"",
            "",
            "#Installing Elastic-Agent",
            "if [ \"$ELASTIC_STATUS\" != \"enabled\" ]; then",
            "\tif [ \"$ARCH\" == \"x86_64\" ]; then",
            "\t\techo \"Elastic agent is not installed. Installing now ... (X64)\"",
            "\t\tcurl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.13.3-linux-x86_64.tar.gz",
            "\t\ttar xzf elastic-agent-8.13.3-linux-x86_64.tar.gz",
            "\t\tcd elastic-agent-8.13.3-linux-x86_64",
            "\t\tsudo ./elastic-agent install --force --url=https://651856dec6c94bd1bbb042c4907c0867.fleet.ap-south-1.aws.elastic-cloud.com:443 --enrollment-token=WEFFaEw0OEJNanNLZTZmMFk3Mnc6ZUFYa1hycmdSaHk5enpWdWI0S3J1dw== --tag=poc",
            "\telif [ \"$ARCH\" != \"x86_64\" ]; then\t\t",
            "\t\techo \"Elastic agent is not installed. Installing now ... (arm64)\"",
            "\t\tcurl -L -O https://artifacts.elastic.co/downloads/beats/elastic-agent/elastic-agent-8.13.3-linux-arm64.tar.gz",
            "\t\ttar xzf elastic-agent-8.13.3-linux-arm64.tar.gz",
            "\t\tcd elastic-agent-8.13.3-linux-arm64",
            "\t\tsudo ./elastic-agent install --force --url=https://651856dec6c94bd1bbb042c4907c0867.fleet.ap-south-1.aws.elastic-cloud.com:443 --enrollment-token=WEFFaEw0OEJNanNLZTZmMFk3Mnc6ZUFYa1hycmdSaHk5enpWdWI0S3J1dw== --tag=poc",
            "\tfi",
            "elif [ \"$ELASTIC_STATUS\" == \"enabled\" ]; then",
            "\techo \"Elastic agent is already installed.\"",
            "fi",
            "\t",
            "#Checking old host name",
            "OLD_HOST_NAME=$(hostname)",
            "",
            "# Hostname update & Elastic restart",
            "if [ \"$instance_name\" != \"name not defined\" ]; then",
            "",
            "   if [ \"$OLD_HOST_NAME\" != \"$instance_name\" ]; then",
            "\techo \"Updating hostname to $instance_name\"",
            "    \tsudo hostnamectl set-hostname \"$instance_name\"",
            "    \tsudo service elastic-agent restart",
            "    \techo \"Hostname is updated & restarted Elastic service.\"",
            "   else",
            "    \techo \"Instance name is same as Hostname and so skipping hostname update.\"",
            "   fi",
            "else",
            "\techo \"Instance name is 'name not defined', skipping hostname update.\"",
            "fi"
          ]
    }
  },
  "mainSteps": [
    {
      "action": "aws:runShellScript",
      "name": "runShellScript",
      "inputs": {
        "timeoutSeconds": "60",
        "runCommand": [
          "{{ commands }}"
        ]
      }
    }
  ]
}
